"""
Incremental development:

1) run on local machine in dry-run (iteratively adding functionality)
2) execute using `qsub` (or interactive shell on CR2)
3) add queuing system `qsub`
"""
configfile: 'config.yaml' # access using config['key']

# move away from config into envvars
envvars:
    "SSHPASS"

# wildcard_mqpar = os.path.join(config['SCRIPTDIR'], 'mqpar_xmls', "mqpar_{file}.xml")
# mq_par_temp = os.path.join(config['SCRIPTDIR'], config['MQ_PAR_TEMP'])

#local
with open(config['FILES'], encoding='utf-8') as f:
    FILES = [line.strip().split('.raw')[0] for line in f]

FILES = FILES[:20]

#MaxQuant Version REGEX -> log to parameter file
#Session Name to file-name?

localrules: target, download_file, mqpar

# #Target Rule:
rule target:
    input:
        # mockfile approach: https://stackoverflow.com/a/53751654/9684872
        # replace? https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#directories-as-outputs
        file = expand(os.path.join(config['DATADIR'], "{file}", "{file}.txt"), file=FILES)

#remote file retrevial
# #ToDo: Replace using SFTP class
rule download_file:
    output:
        raw = temp(os.path.join(config['DATADIR'], "{file}", "{file}.raw"))
    benchmark:
        os.path.join(config['DATADIR'], "{file}", "benchmark_download.tsv")
    params:
        file="{file}.raw",
        logdir = os.path.join(config['DATADIR'], "{file}"),
        remote=config['REMOTE']
    resources:
        walltime="300", nodes=1, mem_mb=2048
    threads:
        1
    shell:
        "sshpass -e sftp -B 258048 {params.remote} <<< \"get {params.file} {output.raw} \""


rule mqpar:
    input:
        raw = os.path.join(config['DATADIR'], "{file}", "{file}.raw")
    benchmark:
        os.path.join(config['DATADIR'], "{file}", "benchmark_mqpar.tsv")
    params:
        mq_par_temp=os.path.join(config['SCRIPTDIR'], config['MQ_PAR_TEMP']),
        threads_mq=config['THREATS_MQ'],
        logdir = os.path.join(config['DATADIR'], "{file}")
    resources:
        walltime="240", nodes=1, mem_mb=1024
    threads:
        1
    output:
        mq_par = os.path.join(config['SCRIPTDIR'], 'mqpar_xmls', "mqpar_{file}.xml")
    run:
        #snakemake create folders itself if missing -> download job into folder
        # with open({input.mq_par_temp}) as infile, open(output.mq_par, 'w') as outfile:
        with open(params[0], encoding='utf-8') as infile, open(output[0], 'w', encoding='utf-8') as outfile:
            for line in infile:
                line = line.replace('PATH', input.raw)
                line = line.replace('NUM_THREADS', str(params.threads_mq))
                outfile.write(line)
            outfile.close()
            infile.close()


rule maxquant:
    input:           
        raw = os.path.join(config['DATADIR'], "{file}", "{file}.raw"),
        mq_par = os.path.join(config['SCRIPTDIR'], 'mqpar_xmls', "mqpar_{file}.xml"),
        exe = config['MAXQUANTEXE']
    benchmark:
        os.path.join(config['DATADIR'], "{file}", "benchmark_MQ.tsv")
    output:
        out=os.path.join(config['DATADIR'], "{file}", "{file}.txt")
    resources:
        mem_mb=10240, walltime=43200, nodes=1
    threads:
        config['THREATS_MQ']
    envmodules: 
        "tools",
        "mono/5.20.1.19"
    params: 
        logdir = os.path.join(config['DATADIR'], "{file}")
    shell:
        "mono --version && "
        "mono {input.exe} {input.mq_par} && "
        "echo \"Finished run with MaxQuant version {input.exe} at $(date +%F" "%T) \" >> {output.out}"

