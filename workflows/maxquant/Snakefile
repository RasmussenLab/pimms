"""
Incremental development:

1) run on local machine in dry-run (iteratively adding functionality)
2) execute using `qsub` (or interactive shell on CR2)
3) add queuing system `qsub`
"""

# envvars:
    # #https://snakemake.readthedocs.io/en/stable/snakefiles/configuration.html#environment-variables

configfile: 'config.yaml' # access using config['key']

# wildcard_mqpar = os.path.join(config['SCRIPTDIR'], 'mqpar_xmls', "mqpar_{file}.xml")
# mq_par_temp = os.path.join(config['SCRIPTDIR'], config['MQ_PAR_TEMP'])

# import pathlib

#local
FILES = ['20191028_QX4_StEb_MA_HeLa_500ng_191029155608',
         '20191028_QX3_LiSc_MA_Hela_500ng_LC15_1'
         ]

# #Target Rule:
rule target:
    input:
        # mockfile approach: https://stackoverflow.com/a/53751654/9684872
        # replace? https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#directories-as-outputs
        file = expand(os.path.join(config['DATADIR'], "{file}", "{file}.txt"), file=FILES)

#remote file retrevial
# #ToDo: Replace using SFTP class
rule download_file:
    output:
        # raw = temp(os.path.join(config['DATADIR'],"{file}", "{file}.raw"))
        raw = os.path.join(config['DATADIR'], "{file}", "{file}.raw")
    params:
        file="{file}.raw"
    shell:
        # #this assumes your runtime has the SSHPASS env set
        "sshpass -e sftp -B 258048 hela <<< \"get {params.file} {output.raw} \""


rule mqpar:
    input:
        raw = os.path.join(config['DATADIR'], "{file}", "{file}.raw")
    params:
        mq_par_temp=os.path.join(config['SCRIPTDIR'], config['MQ_PAR_TEMP']),
        threads=config['THREATS_MQ']
    output:
        mq_par = os.path.join(config['SCRIPTDIR'], 'mqpar_xmls', "mqpar_{file}.xml")
    run:
        #snakemake create folders itself if missing -> download job into folder
        # with open({input.mq_par_temp}) as infile, open(output.mq_par, 'w') as outfile:
        with open(params[0], encoding='utf-8') as infile, open(output[0], 'w', encoding='utf-8') as outfile:
            for line in infile:
                line = line.replace('PATH', input.raw)
                line = line.replace('NUM_THREADS', params.threads)
                outfile.write(line)
            outfile.close()
            infile.close()


rule maxquant:
    input:           
        raw = os.path.join(config['DATADIR'], "{file}", "{file}.raw"),
        mq_par = os.path.join(config['SCRIPTDIR'], 'mqpar_xmls', "mqpar_{file}.xml"),
        exe = config['MAXQUANTEXE']
    output:
        out=os.path.join(config['DATADIR'], "{file}", "{file}.txt")
    threads:
        config['THREATS_MQ']
    # resources:
    #     mem_mb=8192
    params:
        #set more cores as default: https://github.com/kentsisresearchgroup/UltraQuant/blob/master/UltraQuant.sm
    shell:
        "mono {input.exe} {input.mq_par} &&"
        "touch {output.out}"

